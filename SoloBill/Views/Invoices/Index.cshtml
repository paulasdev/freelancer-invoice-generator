@model IEnumerable<Invoice>
@{
    ViewData["Title"] = "Invoices";
}

<div class="container py-4">
    <!-- Header -->
    <div class="d-flex justify-content-between align-items-center mb-3">
        <h2 class="text-purple">Invoices</h2>
        <a href="/Invoices/Create" class="btn btn-purple">+ Create Invoice</a>
    </div>

@{
    var overdueAmount = Model.Where(i => !i.IsPaid && i.DueDate < DateTime.Now).Sum(i => i.Amount);
    var draftAmount   = Model.Where(i => !i.IsPaid && i.DueDate >= DateTime.Now).Sum(i => i.Amount);
    var unpaidAmount  = Model.Where(i => !i.IsPaid).Sum(i => i.Amount);
    var avgPaidDays   = Model.Where(i => i.IsPaid).Select(i => (i.DueDate - i.IssueDate).TotalDays).DefaultIfEmpty(0).Average();
    var avgPaidDaysText = avgPaidDays > 0 ? $"{Math.Round(avgPaidDays)} days" : "—";
}

    <!-- Stats -->
    <div class="row g-3 mb-3">
        <div class="col-6 col-md-3">
            <div class="card shadow-sm text-center py-3 h-100">
                <div class="card-body">
                    <h5 class="fw-bold mb-0">€@overdueAmount.ToString("N2")</h5>
                    <small class="text-muted">Overdue amount</small>
                </div>
            </div>
        </div>
        <div class="col-6 col-md-3">
            <div class="card shadow-sm text-center py-3 h-100">
                <div class="card-body">
                    <h5 class="fw-bold mb-0">€@draftAmount.ToString("N2")</h5>
                    <small class="text-muted">Drafted totals</small>
                </div>
            </div>
        </div>
        <div class="col-6 col-md-3">
            <div class="card shadow-sm text-center py-3 h-100">
                <div class="card-body">
                    <h5 class="fw-bold mb-0">€@unpaidAmount.ToString("N2")</h5>
                    <small class="text-muted">Unpaid totals</small>
                </div>
            </div>
        </div>
        <div class="col-6 col-md-3">
            <div class="card shadow-sm text-center py-3 h-100">
                <div class="card-body">
                    <h5 class="fw-bold mb-0">@avgPaidDaysText</h5>
                    <small class="text-muted">Average paid time</small>
                </div>
            </div>
        </div>
    </div>

    <!-- Filters -->
    <div class="card p-3 shadow-sm mb-3">
        <div class="row align-items-center g-2">
            <div class="col-md-4">
                <input type="text" id="invoiceSearch" class="form-control" placeholder="Search invoices (number, customer, status...)" />
            </div>
            <div class="col-md-2">
                <select class="form-select" id="customerFilter">
                    <option value="">All Customers</option>
                    @foreach (var name in Model
                        .Select(i => i.CompanyName ?? i.Client?.Company)
                        .Where(s => !string.IsNullOrWhiteSpace(s))
                        .Distinct()
                        .OrderBy(s => s))
                    {
                        <option>@name</option>
                    }
                </select>
            </div>
            <div class="col-md-2">
                <select class="form-select" id="statusFilter">
                    <option value="">All Statuses</option>
                    <option>Paid</option>
                    <option>Unpaid</option>
                    <option>Overdue</option>
                    <option>Draft</option>
                </select>
            </div>
            <div class="col-md-2">
                <input type="date" id="fromDate" class="form-control" />
            </div>
            <div class="col-md-2">
                <input type="date" id="toDate" class="form-control" />
            </div>
        </div>
    </div>

    <!-- Table -->
    <div class="table-responsive" style="max-height:60vh; overflow:auto;">
        <table class="table table-hover bg-white rounded shadow-sm table-mobile table-desktop" id="invoiceTable">
            <thead class="table-light position-sticky top-0" style="z-index:1;">
                <tr>
                    <th class="sortable" onclick="sortTable(0)">Status</th>
                    <th class="sortable" onclick="sortTable(1)">Date</th>
                    <th class="sortable" onclick="sortTable(2)">Number</th>
                    <th class="sortable" onclick="sortTable(3)">Customer</th>
                    <th class="sortable" onclick="sortTable(4)">Total</th>
                    <th class="text-end col-w-120">Actions</th>
                </tr>
            </thead>
            <tbody>
            @foreach (var invoice in Model)
            {
                var statusText = invoice.IsPaid
                    ? "Paid"
                    : (invoice.DueDate < DateTime.Now ? "Overdue" : "Draft");

                <tr>
                    <td data-label="Status" data-status="@statusText">
                        @if (invoice.IsPaid)
                        {
                            <span class="badge bg-success">Paid</span>
                        }
                        else if (invoice.DueDate < DateTime.Now)
                        {
                            <span class="badge bg-warning text-dark">Overdue</span>
                        }
                        else
                        {
                            <span class="badge bg-secondary">Draft</span>
                        }
                    </td>

                    <td data-label="Date" data-date="@invoice.IssueDate.ToString("yyyy-MM-dd")">
                        @invoice.IssueDate.ToString("dd MMM yyyy")
                    </td>

                    <td data-label="Number" data-number="@invoice.InvoiceId">#@invoice.InvoiceId</td>

                    <td data-label="Customer" class="text-truncate-2">
                        @(invoice.CompanyName ?? invoice.Client?.Company)
                    </td>

                    <td data-label="Total" data-total="@invoice.Amount">€@invoice.Amount.ToString("N2")</td>

                    <td data-label="Actions" class="text-end cell-actions">
                        <!-- Desktop dropdown -->
                        <div class="dropdown d-none d-sm-inline-block">
                            <button class="btn btn-sm btn-light" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                                <i class="bi bi-three-dots-vertical"></i>
                            </button>
                            <ul class="dropdown-menu dropdown-menu-end shadow-sm">
                                <li>
                                    <a class="dropdown-item" href="/Invoices/Details/@invoice.InvoiceId">
                                        <i class="bi bi-eye me-2"></i>Details
                                    </a>
                                </li>
                                <li>
                                    <a class="dropdown-item" href="/Invoices/Edit/@invoice.InvoiceId">
                                        <i class="bi bi-pencil-square me-2"></i>Edit
                                    </a>
                                </li>
                                <li>
                                    <form method="post" action="/Invoices/Delete/@invoice.InvoiceId" onsubmit="return confirm('Are you sure you want to delete this invoice?');">
                                        @Html.AntiForgeryToken()
                                        <button class="dropdown-item text-danger" type="submit">
                                            <i class="bi bi-trash3 me-2"></i>Delete
                                        </button>
                                    </form>
                                </li>
                            </ul>
                        </div>

                        <!-- XS compact icon actions -->
                        <div class="d-inline d-sm-none">
                            <a class="btn btn-outline-primary btn-icon" href="/Invoices/Details/@invoice.InvoiceId" title="Details">
                                <i class="bi bi-eye"></i>
                            </a>
                            <a class="btn btn-outline-secondary btn-icon" href="/Invoices/Edit/@invoice.InvoiceId" title="Edit">
                                <i class="bi bi-pencil-square"></i>
                            </a>
                            <form method="post" action="/Invoices/Delete/@invoice.InvoiceId" class="d-inline"
                                  onsubmit="return confirm('Are you sure you want to delete this invoice?');">
                                @Html.AntiForgeryToken()
                                <button class="btn btn-outline-secondary btn-icon" title="Delete" type="submit">
                                    <i class="bi bi-trash3"></i>
                                </button>
                            </form>
                        </div>
                    </td>
                </tr>
            }
            </tbody>
        </table>
    </div>
</div>

@section Scripts {
<script>
(function () {
  const table  = document.getElementById('invoiceTable');
  const tbody  = table?.tBodies?.[0];
  if (!tbody) return;

  const search  = document.getElementById('invoiceSearch');
  const statusF = document.getElementById('statusFilter');
  const custF   = document.getElementById('customerFilter');
  const fromD   = document.getElementById('fromDate');
  const toD     = document.getElementById('toDate');

  const norm = s => (s || '')
      .toString()
      .normalize('NFD')
      .replace(/\p{Diacritic}/gu, '')
      .toLowerCase();

  function inDateRange(isoDate) {
    if (!isoDate) return true;
    const d = new Date(isoDate + 'T00:00:00');
    const f = fromD?.value ? new Date(fromD.value + 'T00:00:00') : null;
    const t = toD?.value   ? new Date(toD.value   + 'T23:59:59') : null;
    if (f && d < f) return false;
    if (t && d > t) return false;
    return true;
  }

  function filterRows() {
    const q = norm(search?.value || '');
    const st = norm(statusF?.value || '');
    const cu = norm(custF?.value || '');

    Array.from(tbody.rows).forEach(tr => {
      const textAll = norm(tr.innerText);
      const status  = norm(tr.querySelector('td[data-status]')?.dataset.status);
      const cust    = norm(tr.querySelector('td[data-label="Customer"]')?.innerText);
      const dateIso = tr.querySelector('td[data-date]')?.dataset.date;

      const okQ  = !q || textAll.includes(q);
      const okS  = !st || status === st;
      const okC  = !cu || cust === cu;
      const okDt = inDateRange(dateIso);

      tr.hidden = !(okQ && okS && okC && okDt);
    });
  }

  ['input','change'].forEach(evt => {
    search?.addEventListener(evt, filterRows);
    statusF?.addEventListener(evt, filterRows);
    custF?.addEventListener(evt, filterRows);
    fromD?.addEventListener(evt, filterRows);
    toD?.addEventListener(evt, filterRows);
  });

  let lastCol = -1, dir = 1;
  window.sortTable = function (colIndex) {
    dir = (colIndex === lastCol) ? -dir : 1;
    lastCol = colIndex;

    const rows = Array.from(tbody.rows).filter(tr => !tr.hidden);
    rows.sort((a, b) => {
      let A, B;

      if (colIndex === 1) { // Date
        A = new Date(a.querySelector('td[data-date]')?.dataset.date + 'T00:00:00').getTime() || 0;
        B = new Date(b.querySelector('td[data-date]')?.dataset.date + 'T00:00:00').getTime() || 0;
        return (A - B) * dir;
      }
      if (colIndex === 2) { // Number
        A = parseInt(a.querySelector('td[data-number]')?.dataset.number || '0', 10);
        B = parseInt(b.querySelector('td[data-number]')?.dataset.number || '0', 10);
        return (A - B) * dir;
      }
      if (colIndex === 4) { // Total
        A = parseFloat(a.querySelector('td[data-total]')?.dataset.total || '0');
        B = parseFloat(b.querySelector('td[data-total]')?.dataset.total || '0');
        return (A - B) * dir;
      }

      const getText = (tr, idx) => (tr.cells[idx]?.innerText || '').trim();
      return getText(a, colIndex).localeCompare(getText(b, colIndex), undefined, { sensitivity: 'base' }) * dir;
    });

    rows.forEach(r => tbody.appendChild(r));
  };

  filterRows();
})();
</script>
}